/*
 * This file is generated by jOOQ.
 */
package ru.itmo.products.generated.jooq.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import ru.itmo.products.generated.jooq.Keys;
import ru.itmo.products.generated.jooq.Public;
import ru.itmo.products.generated.jooq.tables.records.ProductsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Products extends TableImpl<ProductsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.products</code>
     */
    public static final Products PRODUCTS = new Products();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductsRecord> getRecordType() {
        return ProductsRecord.class;
    }

    /**
     * The column <code>public.products.id</code>.
     */
    public final TableField<ProductsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.products.name</code>.
     */
    public final TableField<ProductsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(127).nullable(false), this, "");

    /**
     * The column <code>public.products.coordinate_x</code>.
     */
    public final TableField<ProductsRecord, Double> COORDINATE_X = createField(DSL.name("coordinate_x"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.products.coordinate_y</code>.
     */
    public final TableField<ProductsRecord, Double> COORDINATE_Y = createField(DSL.name("coordinate_y"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.products.creation_date</code>.
     */
    public final TableField<ProductsRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.products.price</code>.
     */
    public final TableField<ProductsRecord, Double> PRICE = createField(DSL.name("price"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.products.part_number</code>.
     */
    public final TableField<ProductsRecord, String> PART_NUMBER = createField(DSL.name("part_number"), SQLDataType.VARCHAR(63), this, "");

    /**
     * The column <code>public.products.unit_of_measure</code>.
     */
    public final TableField<ProductsRecord, String> UNIT_OF_MEASURE = createField(DSL.name("unit_of_measure"), SQLDataType.VARCHAR(63).nullable(false), this, "");

    /**
     * The column <code>public.products.person_id</code>.
     */
    public final TableField<ProductsRecord, Long> PERSON_ID = createField(DSL.name("person_id"), SQLDataType.BIGINT, this, "");

    private Products(Name alias, Table<ProductsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Products(Name alias, Table<ProductsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.products</code> table reference
     */
    public Products(String alias) {
        this(DSL.name(alias), PRODUCTS);
    }

    /**
     * Create an aliased <code>public.products</code> table reference
     */
    public Products(Name alias) {
        this(alias, PRODUCTS);
    }

    /**
     * Create a <code>public.products</code> table reference
     */
    public Products() {
        this(DSL.name("products"), null);
    }

    public <O extends Record> Products(Table<O> child, ForeignKey<O, ProductsRecord> key) {
        super(child, key, PRODUCTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ProductsRecord, Long> getIdentity() {
        return (Identity<ProductsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProductsRecord> getPrimaryKey() {
        return Keys.PRODUCTS_PKEY;
    }

    @Override
    public List<ForeignKey<ProductsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PRODUCTS__PRODUCTS_PERSON_ID_FKEY);
    }

    private transient Persons _persons;

    /**
     * Get the implicit join path to the <code>public.persons</code> table.
     */
    public Persons persons() {
        if (_persons == null)
            _persons = new Persons(this, Keys.PRODUCTS__PRODUCTS_PERSON_ID_FKEY);

        return _persons;
    }

    @Override
    public Products as(String alias) {
        return new Products(DSL.name(alias), this);
    }

    @Override
    public Products as(Name alias) {
        return new Products(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Products rename(String name) {
        return new Products(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Products rename(Name name) {
        return new Products(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, Double, Double, LocalDateTime, Double, String, String, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
