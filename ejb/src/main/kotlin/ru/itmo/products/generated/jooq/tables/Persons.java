/*
 * This file is generated by jOOQ.
 */
package ru.itmo.products.generated.jooq.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import ru.itmo.products.generated.jooq.Keys;
import ru.itmo.products.generated.jooq.Public;
import ru.itmo.products.generated.jooq.tables.records.PersonsRecord;

import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Persons extends TableImpl<PersonsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.persons</code>
     */
    public static final Persons PERSONS = new Persons();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PersonsRecord> getRecordType() {
        return PersonsRecord.class;
    }

    /**
     * The column <code>public.persons.id</code>.
     */
    public final TableField<PersonsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.persons.name</code>.
     */
    public final TableField<PersonsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(127).nullable(false), this, "");

    /**
     * The column <code>public.persons.birthdate</code>.
     */
    public final TableField<PersonsRecord, LocalDateTime> BIRTHDATE = createField(DSL.name("birthdate"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.persons.weight</code>.
     */
    public final TableField<PersonsRecord, Double> WEIGHT = createField(DSL.name("weight"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.persons.eye_color</code>.
     */
    public final TableField<PersonsRecord, String> EYE_COLOR = createField(DSL.name("eye_color"), SQLDataType.VARCHAR(63), this, "");

    /**
     * The column <code>public.persons.hair_color</code>.
     */
    public final TableField<PersonsRecord, String> HAIR_COLOR = createField(DSL.name("hair_color"), SQLDataType.VARCHAR(63).nullable(false), this, "");

    private Persons(Name alias, Table<PersonsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Persons(Name alias, Table<PersonsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.persons</code> table reference
     */
    public Persons(String alias) {
        this(DSL.name(alias), PERSONS);
    }

    /**
     * Create an aliased <code>public.persons</code> table reference
     */
    public Persons(Name alias) {
        this(alias, PERSONS);
    }

    /**
     * Create a <code>public.persons</code> table reference
     */
    public Persons() {
        this(DSL.name("persons"), null);
    }

    public <O extends Record> Persons(Table<O> child, ForeignKey<O, PersonsRecord> key) {
        super(child, key, PERSONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<PersonsRecord, Long> getIdentity() {
        return (Identity<PersonsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PersonsRecord> getPrimaryKey() {
        return Keys.PERSONS_PKEY;
    }

    @Override
    public Persons as(String alias) {
        return new Persons(DSL.name(alias), this);
    }

    @Override
    public Persons as(Name alias) {
        return new Persons(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Persons rename(String name) {
        return new Persons(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Persons rename(Name name) {
        return new Persons(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, LocalDateTime, Double, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
